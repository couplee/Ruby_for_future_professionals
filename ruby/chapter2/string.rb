# classメソッドでクラス名を確認 ※irbで実行
"abc".class  #=> String


            # 💠 2.8.2 %記法で文字列を作る
# %qの場合、!はシングルクォーテーションで囲むのと同じ
puts %q!He said, "Don't speak."!  #=> He said, "Don't speak."

# %Qの場合、!はダブルクォーテーションで囲むのと同じ ※改行文字や式展開が使える(下の式が式展開を使ってる)
something = "Hello."
puts %Q!He said, "#{something}"!  #=> He said, "Hello."

# %!の場合、!はダブルクォーテーションで囲むのと同じ ※改行文字や式展開が使える(下の式が式展開を使ってる)
something = "Bye."
puts %!He said, "#{something}"!  #=> He said, "Bye."

# !を?や^など、任意の記号を区切り文字として使える(下の式は?を使用)
puts %q?He said, "Don't speak."?  #=> He said, "Don't speak."

# <や{や(や[を区切り文字として使う場合、終わりの区切り文字と同じカッコウが区切り文字になる(下の式は{}を区切り文字にしてる)
puts %q{He said, "Don't speak."}  #=> He said, "Don't speak."


                  # 💠 2.8.3 ヒアドキュメント(行指向文字列リテラル)＝文字列を途中で改行
puts "Line 1,
Line 2"
#=> Line 1,
#   Line 2

# 複数行の長い文字列の場合、ヒアドキュメント(行指向文字列リテラル)を使う方がスッキリする
# ヒアドキュメント(行指向文字列リテラル)の書き方
# <<識別子
# 文字
# 文字
# 文字
# 識別子

# ex) ※下の式は文字列をaに代入してる
a = <<TEXT
これはヒアドキュメントです。
複数行に渡る長い文字列を作成するのに便利です。
TEXT
puts a
#=> これはヒアドキュメントです。
#   複数行に渡る長い文字列を作成するのに便利です。

# 上の式で利用した識別子(TEXT)などは自由につけられるが、記述する文字列の中に含まれない文字列を使う
# ex) HTMLを識別子として使う
<<HTML
<div>
  <img src="sample.jpg">
</div>
HTML

# <<-TEXTのように-を入れると、最後の識別子をインデントさせることができる。今回は<<-TEXTとTEXTの前にインデントを入れてる※-がないとエラーになる
def some_method
  <<-TEXT
これはヒアドキュメントです。
<<-を使うと最後の識別子をインデントさせることができます。
  TEXT
end
puts some_method
#=> これはヒアドキュメントです。
#   <<-を使うと最後の識別子をインデントさせることができます。

# Ruby 2.3以降では<<~TEXTのように~を使うことができる。~を使うと文字列をインデントしても、実行するとインデントが無視されて先頭の空白が表示されない。今回は69行目と70行目のインデントがなくなってる
def some_method
  <<~TEXT
    これはヒアドキュメントです。
    <<~を使うと内部文字列のインデント部分が無視されます。
  TEXT
end
puts some_method
#=> これはヒアドキュメントです。
#   <<~を使うと内部文字列のインデント部分が無視されます。

# ヒアドキュメントの中では式展開ができる
name = "Alice"
a = <<TEXT
ようこそ、#{name}さん！
以下のメッセージをご覧ください。
TEXT
puts a
#=> ようこそ、Aliceさん！
#   以下のメッセージをご覧ください。

# <<'TEXT'のように、識別子をシングルクォーテーションで囲むと式展開ができない
name = "Alice"
a = <<'TEXT'
ようこそ、#{name}さん！
以下のメッセージをご覧ください。
TEXT
puts a
#=> ようこそ、#{name}さん！
#   以下のメッセージをご覧ください。

# <<"TEXT"のように、識別子をダブルクォーテーションで囲むと式展開ができる＝<<TEXTと書くのと同じ意味
name = "Alice"
a = <<"TEXT"
ようこそ、#{name}さん！
以下のメッセージをご覧ください。
TEXT
puts a
#=> ようこそ、Aliceさん！
#   以下のメッセージをご覧ください。

# 開始ラベルの<<識別子は一つの式とみなされるから、<<識別子をメソッドの引数として渡したり、<<識別子に対してメソッドを呼び出したりすることができる
# ex) ヒアドキュメントを直接引数として渡す
a = 'Ruby'
a.prepend(<<TEXT)  # .prependは渡された文字列(今回はJavaとPHP)を先頭に追加するメソッド
Java
PHP
TEXT
puts a
#=> Java
#   PHP
#   Ruby

# ヒアドキュメントで作成した文字列に対して、直接upcaseメソッドを呼び出す
b = <<TEXT.upcase  # .upcaseは文字列を全て大文字にする
Hello,
Good-bye.
TEXT
puts b
#=> HELLO,
#   GOOD-BYE.
