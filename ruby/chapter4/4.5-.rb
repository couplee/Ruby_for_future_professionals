                          💠 4.5 範囲(Range)
  Rubyには「1から5まで」や「文字'a'から'e'まで」みたいに、値の範囲を表すオブジェクトがある。これを範囲オブジェクトと言う。範囲オブジェクトの構文は
  最初の値..最後の値(最後の値を含む)
  最初の値...最後の値(最後の値を含まない)
  
    ex)
1..5
1...5
'a'..'e'
'a'...'e'

  範囲オブジェクトはrangeクラスのオブジェクト
(1..5).class  #=> Range
(1...5).class  #=> Range

  ..と...の違いは、最後の値を範囲に含めるか含めないかの違いになる。include?メソッドを使うと引数の値に含まれるかどうかを判定できるから、このメソッドを使って..と...の違いを確認する
range = 1..5  # ..を使ったら、最後の値5が範囲に含まれる
range.include?(0)  #=> false
range.include?(1)  #=> true
range.include?(4.9)  #=> true
range.include?(5)  #=> true
range.include?(6)  #=> false

range = 1...5  # ...を使ったら、最後の値5が範囲に含まれない(4.9999....までが含まれる)
range.include?(0)  #=> false
range.include?(1)  #=> true
range.include?(4.9)  #=> true
range.include?(5)  #=> false
range.include?(6)  #=> false

  ⚠️なお、範囲オブジェクトを変数に入れずに、直接include?のようなメソッドを呼び出す時は範囲オブジェクトを()で囲む必要がある
1..5.include?(1)  #=> NoMethodErrorというエラーになる
(1..5).include?(1)  #=> true # エラーにならない

  これは..や...の優先順位が低いから。()で囲んでないほうのコードは下記のように解釈されたから、エラーが発生した
1..5.include?(1))



                  💠 4.5.1 配列や文字列の一部を抜き出す
  配列に対して添え字の代わりに範囲オブジェクトを渡すと、指定した範囲の要素を取得できる
a = [1, 2, 3, 4, 5]
a[1..3]  #=> [2, 3, 4]  # 2番目から4番目までの要素を取得する

  文字列に対しても同じような操作ができる
a = 'abcdef'
a[1..3]  #=> "bcd"  # 2番目から4番目を抜き出す



            💠 4.5.2 n以上m以下、n以上m未満の判定をする
  n以上m以下、n以上m未満の判定をしたい場合、<や>=のような記号(不等号)を使うよりも範囲オブジェクトを使った方がシンプルに書ける
    ex) 不等号を使う場合
def liquid?(temperature)
  0 <= temperature && temperature < 100
end
liquid?(-1)  #=> false
liquid?(0)  #=> true
liquid?(99)  #=> true
liquid?(100)  #=> false

    ex) 範囲オブジェクトを使う場合
def liquid?(temperature)
  (0...100).include?(temperature)
end
liquid?(-1)  #=> false
liquid?(0)  #=> true
liquid?(99)  #=> true
liquid?(100)  #=> false



                  💠 4.5.3 case文を使う
  範囲オブジェクトはcase文と組み合わせることができる。
    ex) 年齢に応じて料金を判定するメソッド
def charge(age)
  case age
  when 0..5  #=> 0歳から5歳までの場合
    0
  when 6..12  #=> 6歳から12歳までの場合
    300
  when 13..18  #=> 13歳から18歳までの場合
    600
  else  #=> それ以外の場合
    1000
  end
end
charge(3)  #=> 0
charge(12)  #=> 300
charge(16)  #=> 600
charge(25)  #=> 1000


            💠 4.5.4 値が連続する配列を作成する
  範囲オブジェクトに対してto_aオブジェクトを呼び出すと、値が連続する配列を作成できる
(1..5).to_a  #=> [1, 2, 3, 4, 5]
(1...5).to_a  #=> [1, 2, 3, 4]

('a'..'e').to_a  #=> ["a", "b", "c", "d", "e"]
('a'...'e').to_a  #=> ["a", "b", "c", "d"]

('bad'..'bag').to_a  #=> ["bad", "bae", "baf", "bag"]
('bad'...'bag').to_a  #=> ["bad", "bae", "baf"]

  []の中に*と範囲オブジェクトを書いても同じように配列を作れる(*を使って複数の値を配列に展開することをsplat展開と言う)
[*1..5]  #=> [1, 2, 3, 4, 5]
[*1...5]  #=> [1, 2, 3, 4]



              💠 4.5.5 繰り返し処理を行う
  範囲オブジェクトを配列に変換すれば、配列として繰り返し処理を行える
numbers = (1..4).to_a  # 範囲オブジェクトを配列に変換してから繰り返し処理を行う
sum = 0
numbers.each { |n| sum += n }
sum  #=> 10

  だが、配列に変換しなくても、範囲オブジェクトに対して直接eachメソッドを呼び出すことも可能
sum = 0
(1..4).each { |n| sum += n }
sum  #=> 10

  stepメソッドを呼び出すと、値を増やす間隔を指定できる
numbers = []
(1..10).step(2) { |n| numbers << n }
numbers  #=> [1, 3, 5, 7, 9]



                💠 4.6 例題：RGB変換プログラムを作成する
  