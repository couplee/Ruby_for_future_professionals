                    💠 4.7 配列についてもっと詳しく
                    💠 4.7.1 さまざまな要素の取得方法
  添え字を二つ使ったら、添字の位置と取得する長さを指定できる。この場合、配列が返ってくる。下記は構文
配列[位置, 取得する長さ]

  ex) 二つ目の要素から3つ分の要素を取り出すコード
a = [1, 2, 3, 4, 5]
a[1, 3]  #=> [2, 3, 4]

  🌟ex) 4つ目の要素から2つ分の要素を取り出すコード
b = [8, 9, 10, 11, 12, 13, 14, 15]
b[3, 2]  #=> [11, 12]


  values_atメソッドを使ったら、取得したい要素の添え字を複数指定できる
a = [1, 2, 3, 4, 5]
a.values_at(0, 2, 4)  #=> 1, 3, 5

🌟
b = [8, 9, 10, 11, 12, 13]
b.values_at(1, 3, 5)  #=> 9, 11, 13  # 配列の一番目、三番目、五番目の要素の添え字を指定した


  「配列の長さ - 1」を指定すると、最後の要素を取得できる
a = [1, 2, 3]
a[a.size - 1]  #=> 3

🌟
b = [5, 6, 7, 8]
b[b.size - 1]  #=> 8


  だが、Rubyでは添え字に負の値が使える。-1は最後の要素、-2は最後から2番目の要素、のように指定できる
a = [1, 2, 3]
a[-1]  #=> 3  # 最後の要素を取得
a[-2]  #=> 2  # 最後から2番目の要素を取得
a[-2, 2]  #=> [2, 3]  # 最後から2番目の要素から2つの要素を取得。配列で返ってきてる

🌟
b = [5, 6, 7, 8]
b[-1]  #=> 8
b[-3]  #=> 6
b[-2, 2]  #=> [7, 8]


  さらに、配列にはlastというメソッドがあり、これを呼ぶと配列の最後の要素を取得できる。引数に0以上の数値を渡すと、渡した数値の分だけの最後のn個の要素を取得できる
a = [1, 2, 3]
a.last  #=> 3
a.last(2)  #=> [2, 3]  # 最後の2個の要素を取得

🌟
b = [5, 6, 7, 8]
b.last  #=>  8
b.last(3)  #=> [6, 7, 8]


  lastの反対のfirstもあって、政党の要素を取得するメソッド
a = [1, 2, 3]
a.first  #=> 1
a.first(2)  #=> [1, 2]

🌟
b = [5, 6, 7, 8]
b.first  #=> 5
b.first(3)  #=> [5, 6, 7]



                              💠 4.7.2 さまざまな要素の変更方法
  値を変更する場合も負の添字が使えるが、正の値を使う時と違って、元の大きさを超えるような添え字を指定したらエラーになる
a = [1, 2, 3]
a[-3]  = -10  # 最後から3つ目の要素を-10に書き換える
a  #=> [-10, 2, 3]
a[-4] = 0  #=> IndexError (index -4 too small for array; minimum: -3)  # 指定可能な負の値よりも小さくなるとエラーになる

🌟
b = [5, 6, 7, 8]
b[-2] = -70
b  #=> [5, 6, -70, 8]
b[-4] = -5
b  #=> [-5, 6, -70, 8]
b[-5] = -4  #=> IndexError (index -5 too small for array; minimum: -4)  # 元は4つしか要素がないから、最後から5つ目の要素を指定したらエラーになった


  開始位置と長さを指定して、要素を置き換えることもできる
a = [1, 2, 3, 4, 5]
a[1, 3] = 100  # 2つ目から3要素分を100で置き換える
a  #=> [1, 100, 5]

🌟
b = [5, 6, 7, 8, 9, 10]
b[3, 3] = 300  # 4つ目から要素分を300に置き換える
b  #=> [5, 6, 7, 300]


  <<だけでなく、pushメソッドを使っても要素を追加できる。pushメソッドの場合、複数の値を追加できる
a = []
a.push(1)  #=> [1]
a.push(2, 3)  #=> [1, 2, 3]

🌟
b = []
b.push(5)  #=> [5]
b.push(7, 9)  #=> [5, 7, 9]


  指定した値に一致する要素を削除したい場合、deleteメソッドを使う
a = [1, 2, 3, 1, 2, 3]
a.delete(2)  #=> 2  # 値が2である要素を削除する（削除した値が戻り値になる）
a  #=> [1, 3, 1, 3]

a.delete(5)  #=> nil  # 存在しない値を指定するとnilが返ってくる
a  #=> [1, 3, 1, 3]

🌟
b = [5, 6, 7, 8, 5, 6, 7, 8]
b.delete(7)  #=> 7
b  #=> [5, 6, 8, 5, 6, 8]

b.delete(3)  #=> nil
b  #=> [5, 6, 8, 5, 6, 8]