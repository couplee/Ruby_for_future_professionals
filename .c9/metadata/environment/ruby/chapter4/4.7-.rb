{"filter":false,"title":"4.7-.rb","tooltip":"/ruby/chapter4/4.7-.rb","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":394,"column":14},"end":{"row":394,"column":15},"action":"insert","lines":["b"],"id":938},{"start":{"row":394,"column":15},"end":{"row":394,"column":16},"action":"insert","lines":["c"]},{"start":{"row":394,"column":16},"end":{"row":394,"column":17},"action":"insert","lines":["d"]}],[{"start":{"row":394,"column":18},"end":{"row":394,"column":19},"action":"insert","lines":[" "],"id":939},{"start":{"row":394,"column":19},"end":{"row":394,"column":20},"action":"insert","lines":[" "]},{"start":{"row":394,"column":20},"end":{"row":394,"column":21},"action":"insert","lines":["#"]}],[{"start":{"row":394,"column":21},"end":{"row":394,"column":22},"action":"insert","lines":[" "],"id":940}],[{"start":{"row":394,"column":22},"end":{"row":394,"column":23},"action":"insert","lines":["#"],"id":941}],[{"start":{"row":394,"column":22},"end":{"row":394,"column":23},"action":"remove","lines":["#"],"id":942}],[{"start":{"row":394,"column":22},"end":{"row":394,"column":23},"action":"insert","lines":["2"],"id":943}],[{"start":{"row":394,"column":23},"end":{"row":394,"column":29},"action":"insert","lines":["文字目から3"],"id":944}],[{"start":{"row":394,"column":29},"end":{"row":394,"column":33},"action":"insert","lines":["文字文を"],"id":945}],[{"start":{"row":394,"column":32},"end":{"row":394,"column":33},"action":"remove","lines":["を"],"id":946},{"start":{"row":394,"column":31},"end":{"row":394,"column":32},"action":"remove","lines":["文"]}],[{"start":{"row":394,"column":31},"end":{"row":394,"column":32},"action":"insert","lines":["分"],"id":947},{"start":{"row":394,"column":32},"end":{"row":394,"column":33},"action":"insert","lines":["を"]}],[{"start":{"row":394,"column":33},"end":{"row":394,"column":35},"action":"insert","lines":["取得"],"id":948}],[{"start":{"row":394,"column":35},"end":{"row":395,"column":0},"action":"insert","lines":["",""],"id":949}],[{"start":{"row":395,"column":0},"end":{"row":395,"column":1},"action":"insert","lines":["a"],"id":950}],[{"start":{"row":395,"column":1},"end":{"row":395,"column":3},"action":"insert","lines":["[]"],"id":951}],[{"start":{"row":395,"column":2},"end":{"row":395,"column":3},"action":"insert","lines":["-"],"id":952},{"start":{"row":395,"column":3},"end":{"row":395,"column":4},"action":"insert","lines":["1"]}],[{"start":{"row":395,"column":5},"end":{"row":395,"column":6},"action":"insert","lines":[" "],"id":953},{"start":{"row":395,"column":6},"end":{"row":395,"column":7},"action":"insert","lines":[" "]},{"start":{"row":395,"column":7},"end":{"row":395,"column":8},"action":"insert","lines":["#"]},{"start":{"row":395,"column":8},"end":{"row":395,"column":9},"action":"insert","lines":["="]},{"start":{"row":395,"column":9},"end":{"row":395,"column":10},"action":"insert","lines":[">"]}],[{"start":{"row":395,"column":10},"end":{"row":395,"column":11},"action":"insert","lines":[" "],"id":954}],[{"start":{"row":395,"column":11},"end":{"row":395,"column":13},"action":"insert","lines":["\"\""],"id":955}],[{"start":{"row":395,"column":12},"end":{"row":395,"column":13},"action":"insert","lines":["e"],"id":956}],[{"start":{"row":395,"column":14},"end":{"row":395,"column":15},"action":"insert","lines":[" "],"id":957},{"start":{"row":395,"column":15},"end":{"row":395,"column":16},"action":"insert","lines":[" "]},{"start":{"row":395,"column":16},"end":{"row":395,"column":17},"action":"insert","lines":["#"]}],[{"start":{"row":395,"column":17},"end":{"row":395,"column":18},"action":"insert","lines":[" "],"id":958}],[{"start":{"row":395,"column":18},"end":{"row":395,"column":21},"action":"insert","lines":["最後の"],"id":959},{"start":{"row":395,"column":21},"end":{"row":395,"column":22},"action":"insert","lines":["1"]}],[{"start":{"row":395,"column":22},"end":{"row":395,"column":25},"action":"insert","lines":["文字を"],"id":960}],[{"start":{"row":395,"column":25},"end":{"row":395,"column":27},"action":"insert","lines":["取得"],"id":961}],[{"start":{"row":395,"column":27},"end":{"row":396,"column":0},"action":"insert","lines":["",""],"id":962},{"start":{"row":396,"column":0},"end":{"row":397,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":397,"column":0},"end":{"row":397,"column":1},"action":"insert","lines":["a"],"id":963}],[{"start":{"row":397,"column":1},"end":{"row":397,"column":3},"action":"insert","lines":["[]"],"id":964}],[{"start":{"row":397,"column":2},"end":{"row":397,"column":3},"action":"insert","lines":["0"],"id":965}],[{"start":{"row":397,"column":4},"end":{"row":397,"column":5},"action":"insert","lines":[" "],"id":966},{"start":{"row":397,"column":5},"end":{"row":397,"column":6},"action":"insert","lines":["="]}],[{"start":{"row":397,"column":6},"end":{"row":397,"column":7},"action":"insert","lines":[" "],"id":967}],[{"start":{"row":397,"column":7},"end":{"row":397,"column":9},"action":"insert","lines":["''"],"id":968}],[{"start":{"row":397,"column":8},"end":{"row":397,"column":9},"action":"insert","lines":["X"],"id":969}],[{"start":{"row":397,"column":10},"end":{"row":397,"column":11},"action":"insert","lines":[" "],"id":970},{"start":{"row":397,"column":11},"end":{"row":397,"column":12},"action":"insert","lines":[" "]},{"start":{"row":397,"column":12},"end":{"row":397,"column":13},"action":"insert","lines":["#"]}],[{"start":{"row":397,"column":13},"end":{"row":397,"column":14},"action":"insert","lines":[" "],"id":971},{"start":{"row":397,"column":14},"end":{"row":397,"column":15},"action":"insert","lines":["1"]}],[{"start":{"row":397,"column":15},"end":{"row":398,"column":0},"action":"insert","lines":["",""],"id":972}],[{"start":{"row":397,"column":15},"end":{"row":398,"column":0},"action":"remove","lines":["",""],"id":973}],[{"start":{"row":397,"column":15},"end":{"row":397,"column":20},"action":"insert","lines":["文字目を\""],"id":974},{"start":{"row":397,"column":20},"end":{"row":397,"column":21},"action":"insert","lines":["X"]}],[{"start":{"row":397,"column":21},"end":{"row":397,"column":22},"action":"insert","lines":["\""],"id":975},{"start":{"row":397,"column":22},"end":{"row":397,"column":23},"action":"insert","lines":["に"]}],[{"start":{"row":397,"column":23},"end":{"row":397,"column":28},"action":"insert","lines":["置き換える"],"id":976}],[{"start":{"row":397,"column":28},"end":{"row":398,"column":0},"action":"insert","lines":["",""],"id":977}],[{"start":{"row":398,"column":0},"end":{"row":398,"column":1},"action":"insert","lines":["a"],"id":978}],[{"start":{"row":398,"column":1},"end":{"row":398,"column":3},"action":"insert","lines":["[]"],"id":979}],[{"start":{"row":398,"column":2},"end":{"row":398,"column":3},"action":"insert","lines":["1"],"id":980},{"start":{"row":398,"column":3},"end":{"row":398,"column":4},"action":"insert","lines":[","]}],[{"start":{"row":398,"column":4},"end":{"row":398,"column":5},"action":"insert","lines":[" "],"id":981},{"start":{"row":398,"column":5},"end":{"row":398,"column":6},"action":"insert","lines":["3"]}],[{"start":{"row":398,"column":7},"end":{"row":398,"column":8},"action":"insert","lines":[" "],"id":982},{"start":{"row":398,"column":8},"end":{"row":398,"column":9},"action":"insert","lines":[" "]}],[{"start":{"row":398,"column":8},"end":{"row":398,"column":9},"action":"remove","lines":[" "],"id":983}],[{"start":{"row":398,"column":8},"end":{"row":398,"column":9},"action":"insert","lines":["="],"id":984}],[{"start":{"row":398,"column":9},"end":{"row":398,"column":10},"action":"insert","lines":[" "],"id":985}],[{"start":{"row":397,"column":10},"end":{"row":397,"column":11},"action":"insert","lines":[" "],"id":986},{"start":{"row":397,"column":11},"end":{"row":397,"column":12},"action":"insert","lines":[" "]},{"start":{"row":397,"column":12},"end":{"row":397,"column":13},"action":"insert","lines":["#"]},{"start":{"row":397,"column":13},"end":{"row":397,"column":14},"action":"insert","lines":["="]}],[{"start":{"row":397,"column":14},"end":{"row":397,"column":15},"action":"insert","lines":[">"],"id":987}],[{"start":{"row":397,"column":15},"end":{"row":397,"column":16},"action":"insert","lines":[" "],"id":988}],[{"start":{"row":397,"column":15},"end":{"row":397,"column":16},"action":"remove","lines":[" "],"id":989},{"start":{"row":397,"column":14},"end":{"row":397,"column":15},"action":"remove","lines":[">"]},{"start":{"row":397,"column":13},"end":{"row":397,"column":14},"action":"remove","lines":["="]},{"start":{"row":397,"column":12},"end":{"row":397,"column":13},"action":"remove","lines":["#"]},{"start":{"row":397,"column":10},"end":{"row":397,"column":12},"action":"remove","lines":["  "]}],[{"start":{"row":397,"column":28},"end":{"row":398,"column":0},"action":"insert","lines":["",""],"id":990},{"start":{"row":398,"column":0},"end":{"row":398,"column":1},"action":"insert","lines":["a"]}],[{"start":{"row":398,"column":1},"end":{"row":398,"column":2},"action":"insert","lines":[" "],"id":991},{"start":{"row":398,"column":2},"end":{"row":398,"column":3},"action":"insert","lines":["="]}],[{"start":{"row":398,"column":2},"end":{"row":398,"column":3},"action":"remove","lines":["="],"id":992}],[{"start":{"row":398,"column":2},"end":{"row":398,"column":3},"action":"insert","lines":[" "],"id":993},{"start":{"row":398,"column":3},"end":{"row":398,"column":4},"action":"insert","lines":["#"]},{"start":{"row":398,"column":4},"end":{"row":398,"column":5},"action":"insert","lines":["="]},{"start":{"row":398,"column":5},"end":{"row":398,"column":6},"action":"insert","lines":[">"]}],[{"start":{"row":398,"column":6},"end":{"row":398,"column":7},"action":"insert","lines":[" "],"id":994}],[{"start":{"row":398,"column":7},"end":{"row":398,"column":9},"action":"insert","lines":["\"\""],"id":995}],[{"start":{"row":398,"column":8},"end":{"row":398,"column":9},"action":"insert","lines":["X"],"id":996},{"start":{"row":398,"column":9},"end":{"row":398,"column":10},"action":"insert","lines":["b"]}],[{"start":{"row":398,"column":10},"end":{"row":398,"column":11},"action":"insert","lines":["c"],"id":997},{"start":{"row":398,"column":11},"end":{"row":398,"column":12},"action":"insert","lines":["d"]},{"start":{"row":398,"column":12},"end":{"row":398,"column":13},"action":"insert","lines":["e"]}],[{"start":{"row":399,"column":10},"end":{"row":399,"column":12},"action":"insert","lines":["''"],"id":998}],[{"start":{"row":399,"column":11},"end":{"row":399,"column":12},"action":"insert","lines":["Y"],"id":999}],[{"start":{"row":399,"column":13},"end":{"row":399,"column":14},"action":"insert","lines":[" "],"id":1000},{"start":{"row":399,"column":14},"end":{"row":399,"column":15},"action":"insert","lines":[" "]},{"start":{"row":399,"column":15},"end":{"row":399,"column":16},"action":"insert","lines":["#"]}],[{"start":{"row":399,"column":16},"end":{"row":399,"column":17},"action":"insert","lines":[" "],"id":1001}],[{"start":{"row":399,"column":17},"end":{"row":399,"column":18},"action":"insert","lines":["2"],"id":1002}],[{"start":{"row":399,"column":18},"end":{"row":399,"column":23},"action":"insert","lines":["文字目から"],"id":1003},{"start":{"row":399,"column":23},"end":{"row":399,"column":24},"action":"insert","lines":["3"]}],[{"start":{"row":399,"column":24},"end":{"row":399,"column":28},"action":"insert","lines":["文字分を"],"id":1004},{"start":{"row":399,"column":28},"end":{"row":399,"column":29},"action":"insert","lines":["\""]}],[{"start":{"row":399,"column":29},"end":{"row":399,"column":30},"action":"insert","lines":["Y"],"id":1005}],[{"start":{"row":399,"column":30},"end":{"row":399,"column":31},"action":"insert","lines":["\""],"id":1006},{"start":{"row":399,"column":31},"end":{"row":399,"column":32},"action":"insert","lines":["に"]}],[{"start":{"row":399,"column":32},"end":{"row":399,"column":37},"action":"insert","lines":["置き換える"],"id":1007}],[{"start":{"row":399,"column":37},"end":{"row":400,"column":0},"action":"insert","lines":["",""],"id":1008}],[{"start":{"row":400,"column":0},"end":{"row":400,"column":1},"action":"insert","lines":["a"],"id":1009}],[{"start":{"row":400,"column":1},"end":{"row":400,"column":2},"action":"insert","lines":[" "],"id":1010},{"start":{"row":400,"column":2},"end":{"row":400,"column":3},"action":"insert","lines":[" "]},{"start":{"row":400,"column":3},"end":{"row":400,"column":4},"action":"insert","lines":["#"]},{"start":{"row":400,"column":4},"end":{"row":400,"column":5},"action":"insert","lines":["="]}],[{"start":{"row":400,"column":5},"end":{"row":400,"column":6},"action":"insert","lines":[">"],"id":1011}],[{"start":{"row":400,"column":6},"end":{"row":400,"column":7},"action":"insert","lines":[" "],"id":1012}],[{"start":{"row":400,"column":7},"end":{"row":400,"column":9},"action":"insert","lines":["\"\""],"id":1013}],[{"start":{"row":400,"column":8},"end":{"row":400,"column":9},"action":"insert","lines":["W"],"id":1014}],[{"start":{"row":400,"column":8},"end":{"row":400,"column":9},"action":"remove","lines":["W"],"id":1015}],[{"start":{"row":400,"column":8},"end":{"row":400,"column":9},"action":"insert","lines":["X"],"id":1016},{"start":{"row":400,"column":9},"end":{"row":400,"column":10},"action":"insert","lines":["Y"]},{"start":{"row":400,"column":10},"end":{"row":400,"column":11},"action":"insert","lines":["e"]}],[{"start":{"row":400,"column":12},"end":{"row":401,"column":0},"action":"insert","lines":["",""],"id":1017},{"start":{"row":401,"column":0},"end":{"row":401,"column":1},"action":"insert","lines":["a"]}],[{"start":{"row":401,"column":1},"end":{"row":401,"column":2},"action":"insert","lines":[" "],"id":1018},{"start":{"row":401,"column":2},"end":{"row":401,"column":3},"action":"insert","lines":["<"]},{"start":{"row":401,"column":3},"end":{"row":401,"column":4},"action":"insert","lines":["<"]}],[{"start":{"row":401,"column":4},"end":{"row":401,"column":5},"action":"insert","lines":[" "],"id":1019}],[{"start":{"row":401,"column":5},"end":{"row":401,"column":7},"action":"insert","lines":["''"],"id":1020}],[{"start":{"row":401,"column":6},"end":{"row":401,"column":7},"action":"insert","lines":["P"],"id":1021},{"start":{"row":401,"column":7},"end":{"row":401,"column":8},"action":"insert","lines":["Q"]},{"start":{"row":401,"column":8},"end":{"row":401,"column":9},"action":"insert","lines":["R"]}],[{"start":{"row":401,"column":10},"end":{"row":401,"column":11},"action":"insert","lines":[" "],"id":1022},{"start":{"row":401,"column":11},"end":{"row":401,"column":12},"action":"insert","lines":[" "]},{"start":{"row":401,"column":12},"end":{"row":401,"column":13},"action":"insert","lines":["#"]}],[{"start":{"row":401,"column":13},"end":{"row":401,"column":14},"action":"insert","lines":[" "],"id":1023}],[{"start":{"row":401,"column":14},"end":{"row":401,"column":18},"action":"insert","lines":["末尾に\""],"id":1024},{"start":{"row":401,"column":18},"end":{"row":401,"column":19},"action":"insert","lines":["\""]}],[{"start":{"row":401,"column":18},"end":{"row":401,"column":19},"action":"insert","lines":["P"],"id":1025},{"start":{"row":401,"column":19},"end":{"row":401,"column":20},"action":"insert","lines":["G"]},{"start":{"row":401,"column":20},"end":{"row":401,"column":21},"action":"insert","lines":["R"]}],[{"start":{"row":401,"column":22},"end":{"row":401,"column":23},"action":"insert","lines":["を"],"id":1026}],[{"start":{"row":401,"column":19},"end":{"row":401,"column":20},"action":"remove","lines":["G"],"id":1027}],[{"start":{"row":401,"column":19},"end":{"row":401,"column":20},"action":"insert","lines":["Q"],"id":1028}],[{"start":{"row":401,"column":23},"end":{"row":401,"column":25},"action":"insert","lines":["連結"],"id":1029},{"start":{"row":401,"column":25},"end":{"row":401,"column":27},"action":"insert","lines":["する"]}],[{"start":{"row":401,"column":27},"end":{"row":402,"column":0},"action":"insert","lines":["",""],"id":1030},{"start":{"row":402,"column":0},"end":{"row":402,"column":1},"action":"insert","lines":["a"]}],[{"start":{"row":402,"column":1},"end":{"row":402,"column":2},"action":"insert","lines":[" "],"id":1031},{"start":{"row":402,"column":2},"end":{"row":402,"column":3},"action":"insert","lines":[" "]},{"start":{"row":402,"column":3},"end":{"row":402,"column":4},"action":"insert","lines":["#"]},{"start":{"row":402,"column":4},"end":{"row":402,"column":5},"action":"insert","lines":["="]},{"start":{"row":402,"column":5},"end":{"row":402,"column":6},"action":"insert","lines":[">"]}],[{"start":{"row":402,"column":6},"end":{"row":402,"column":7},"action":"insert","lines":[" "],"id":1032}],[{"start":{"row":402,"column":7},"end":{"row":402,"column":9},"action":"insert","lines":["\"\""],"id":1033}],[{"start":{"row":402,"column":8},"end":{"row":402,"column":9},"action":"insert","lines":["X"],"id":1034},{"start":{"row":402,"column":9},"end":{"row":402,"column":10},"action":"insert","lines":["Y"]},{"start":{"row":402,"column":10},"end":{"row":402,"column":11},"action":"insert","lines":["e"]}],[{"start":{"row":402,"column":11},"end":{"row":402,"column":12},"action":"insert","lines":["P"],"id":1035},{"start":{"row":402,"column":12},"end":{"row":402,"column":13},"action":"insert","lines":["Q"]},{"start":{"row":402,"column":13},"end":{"row":402,"column":14},"action":"insert","lines":["R"]}],[{"start":{"row":264,"column":0},"end":{"row":402,"column":15},"action":"remove","lines":["","              💠 4.7.8 *で配列同士を非破壊的に連結する","  []の中に*付きで別の配列を置くと、その配列が展開されて別々の要素になる。これもsplat展開の一種","a = [1, 2, 3]","","[a]  #=> [[1, 2, 3]]  # []の中にそのまま配列を置いたら、配列の配列になる","","[*a]  #=> [1, 2, 3]  # *付きで配列を置いたら、展開されて別々の要素になる","","  これを利用したら、別の配列を要素の一部とする新しい配列を作れる","a = [1, 2, 3]","[-1, 0, *a, 4, 5]  #=> [-1, 0, 1, 2, 3, 4, 5]","","  *じゃなく、下記のように+を使うことができるが、*を使った方が簡潔なコードになる","a = [1, 2, 3]","[-1, 0] + a + [4, 5]  #=> [-1, 0, 1, 2, 3, 4, 5]","","","","                  💠 4.7.9 ==で等しい配列かどうか判断する","  ==と使ったら、左辺と右辺の配列が等しいかどうかをチェックできる。この場合、配列の前要素を==で比較して、すべて等しい場合は「2つの配列は等しい」と判断される","[1, 2, 3] == [1, 2, 3]  #=> true  # 配列が等しい場合","","[1, 2, 3] == [1, 2, 4]  #=> false  # 配列が等しくない場合","[1, 2, 3] == [1, 2]  #=> false  # 配列が等しくない場合","[1, 2, 3] == [1, 2, 3, 4]  #=> false  # 配列が等しくない場合","","","","                        💠 4.7.10 %記法で文字列の配列を簡潔に作る","  配列は[]を使って作成することが多いが、文字列については%記法の%wまたは%Wを使って作成する方法が用意されてる。%記法を使ったら、カンマじゃなく、空白文字(スペースや改行)が要素の区切り文字となる。","  また、文字列をシングルクオートやダブルクオートで囲む必要もないから、結果として[]を使う場合よりもコードが短くなる","    ex) []で文字列の配列を作成する","['apple', 'melon', 'orange']  #=> [\"apple\", \"melon\", \"orange\"]","","    ex) %wで文字列の配列を作成する(!で囲む場合)","%w!apple melon orange!  #=> [\"apple\",\"melon\", \"orange\"]","","    ex) %wで文字列の配列を作成する(丸カッコで囲む場合)","%w(apple melon orange)  #=> [\"apple\",\"melon\", \"orange\"]","","    ex) 空白文字(スペースや改行)が連続した場合も一つの区切り文字とみなされる","%w(","  apple","  melon","  orange",")","#=> [\"apple\", \"melon\", \"orange\"]","","  値にスペースを含めたい場合、バックスプラッシュでエスケープする","%w(big\\ apple small\\ melon orange)  #=> [\"big apple\", \"small melon\", \"orange\"]","","  式展開や改行文字(\\n)、タブ文字(\\t)などを含めたい場合、%W(大文字のW)を使う","prefix = 'This is'","%W(#{prefix}\\ an\\ apple small\\nmelon orange)  #=> [\"This is an apple\", \"small\\nmelon\", \"orange\"]","","  %記法は「2.8.2 %記法で文字列を作る」でも学習してるから、そっちも参照する。また、%記法でシンボルの配列を作る方法もある。これは「5.7.2 %記法でシンボルやシンボルの配列で作成する」で学習する","","","","                        💠 4.7.11 文字列を配列に変換する","  文字列を分解して配列に変換することもできる。何個か方法はあるが、ここではcharsメソッドとsplitメソッドを学習する","  charsメソッドは文字列中の1文字1文字を配列の要素に分解するメソッド","'Ruby'.chars  #=> [\"R\", \"u\", \"b\", \"y\"]","","  splitメソッドは引数で渡した区切り文字で文字列を配列に分割するメソッド","'Ruby,Java,Perl,PHP'.split(',')  #=> [\"Ruby\", \"Java\", \"Perl\", \"PHP\"]","","  このほかにも正規表現と組み合わせて文字列を配列に変換できる。これについては「6.3.4 正規表現と組み合わせると便利なStringクラスのメソッド」で学習する","","","","                              💠 4.7.12 配列に初期値を設定する","  ここまで配列の作成は[]を使ってきたが、このほかにもArray.newを使って作成する方法がある","a = Array.new  # a = []と同じ","","  Array.newに引数を渡すと、その個数分の要素が追加される。このときの初期値はnil","a = Array.new(5)  # 要素が5つの配列を作成する","a  #=> [nil, nil, nil, nil, nil]","","  さらに第2引数を指定したら、nil以外の初期値を設定できる","a = Array.new(5, 0)  # 要素が5つで0が初期値とする配列を作成する","a  #=> [0, 0, 0, 0, 0]","","  Array.newではブロックを使って初期値を設定することもできる。ブロックは作成する要素の数だけ呼ばれて、ブロック引数には要素の添え字が渡される。","  配列にはブロックの戻り値がそれぞれ初期値として設定される。","    ex) ブロックを使うコード例","a = Array.new(10) { |n| n % 3 + 1 }  # 要素数が10で、1, 2, 3, 1, 2, 3...と繰り返す配列を作る","a  #=> [1, 2, 3, 1, 2, 3, 1, 2, 3, 1]","","","","                     💠 4.7.13 配列に初期値を設定する場合の注意点","  だが、第2引数を使って初期値を指定する場合は注意が必要","a = Array.new(5, 'default')  # 要素が5つで'default'を初期値とする配列を作成する","a  #=> [\"default\", \"default\", \"default\", \"default\", \"default\"]","","str = a[0]  # 1番目の要素を取得する","str  #=> \"default\"","","str.upcase!  # 1番目の要素を大文字に変換する(破壊的変更)","str  #=> \"DEFAULT\"","","a  #=> [\"DEFAULT\", \"DEFAULT\", \"DEFAULT\", \"DEFAULT\", \"DEFAULT\"]  # 配列の要素全てが大文字に変わってしまった","","  これは配列の前要素が同じ文字列オブジェクトを参照してるから発生する問題。一見、配列の各要素は別々のように見えても、実際は1つのオブジェクトに紐づいてしまってるから、そのオブジェクトが変更されると無関係に見える他の要素も一緒に変更されてしまう","  この問題を避けるためには引数ではなく、ブロックで初期値を渡すようにする","a = Array.new(5) { 'default' }  # ブロックを使って、ブロックの戻り値を初期値とする(ブロック引数には添え字が渡されるが、ここでは使わないからブロック引数を省略)","a  #=> [\"default\", \"default\", \"default\", \"default\", \"default\"]","","str = a[0]  # 1番目の要素を取得する","str  #=> \"default\"","","str.upcase!  # 1番目の要素を大文字に変換する(破壊的変更)","str  #=> \"DEFAULT\"","","a  #=> [\"DEFAULT\", \"default\", \"default\", \"default\", \"default\"]  # 1番目の要素だけが大文字になって、ほかは変わらない","","  ブロックを使うと、ブロックが呼ばれるたびに文字列の\"default\"が新しく作成されるから、結果として配列の各要素は別々の文字列を参照することになる。","  ややこしいが、「同じ値で同一のオブジェクト」なのか、「同じ値で異なるオブジェクト」なのか、意識してコードを書かないと、思わぬ不具合を作ってしまう可能性がある。","","","","                      💠 4.7.14 ミュータブル？　イミュータブル？","  P.124確認","  ","    Column []や<<を使った文字列の操作","  文字列は配列とは無関係なオブジェクトだが、[]や<<を使って配列と同じような操作をすることができる","a = 'abcde'","a[2]  #=> \"c\"  # 3文字目を取得","a[1, 3]  #=> \"bcd\"  # 2文字目から3文字分を取得","a[-1]  #=> \"e\"  # 最後の1文字を��得","","a[0] = 'X'  # 1文字目を\"X\"に置き換える","a  #=> \"Xbcde\"","a[1, 3] = 'Y'  # 2文字目から3文字分を\"Y\"に置き換える","a  #=> \"XYe\"","a << 'PQR'  # 末尾に\"PQR\"を連結する","a  #=> \"XYePQR\""],"id":1036}],[{"start":{"row":264,"column":0},"end":{"row":402,"column":15},"action":"insert","lines":["","              💠 4.7.8 *で配列同士を非破壊的に連結する","  []の中に*付きで別の配列を置くと、その配列が展開されて別々の要素になる。これもsplat展開の一種","a = [1, 2, 3]","","[a]  #=> [[1, 2, 3]]  # []の中にそのまま配列を置いたら、配列の配列になる","","[*a]  #=> [1, 2, 3]  # *付きで配列を置いたら、展開されて別々の要素になる","","  これを利用したら、別の配列を要素の一部とする新しい配列を作れる","a = [1, 2, 3]","[-1, 0, *a, 4, 5]  #=> [-1, 0, 1, 2, 3, 4, 5]","","  *じゃなく、下記のように+を使うことができるが、*を使った方が簡潔なコードになる","a = [1, 2, 3]","[-1, 0] + a + [4, 5]  #=> [-1, 0, 1, 2, 3, 4, 5]","","","","                  💠 4.7.9 ==で等しい配列かどうか判断する","  ==と使ったら、左辺と右辺の配列が等しいかどうかをチェックできる。この場合、配列の前要素を==で比較して、すべて等しい場合は「2つの配列は等しい」と判断される","[1, 2, 3] == [1, 2, 3]  #=> true  # 配列が等しい場合","","[1, 2, 3] == [1, 2, 4]  #=> false  # 配列が等しくない場合","[1, 2, 3] == [1, 2]  #=> false  # 配列が等しくない場合","[1, 2, 3] == [1, 2, 3, 4]  #=> false  # 配列が等しくない場合","","","","                        💠 4.7.10 %記法で文字列の配列を簡潔に作る","  配列は[]を使って作成することが多いが、文字列については%記法の%wまたは%Wを使って作成する方法が用意されてる。%記法を使ったら、カンマじゃなく、空白文字(スペースや改行)が要素の区切り文字となる。","  また、文字列をシングルクオートやダブルクオートで囲む必要もないから、結果として[]を使う場合よりもコードが短くなる","    ex) []で文字列の配列を作成する","['apple', 'melon', 'orange']  #=> [\"apple\", \"melon\", \"orange\"]","","    ex) %wで文字列の配列を作成する(!で囲む場合)","%w!apple melon orange!  #=> [\"apple\",\"melon\", \"orange\"]","","    ex) %wで文字列の配列を作成する(丸カッコで囲む場合)","%w(apple melon orange)  #=> [\"apple\",\"melon\", \"orange\"]","","    ex) 空白文字(スペースや改行)が連続した場合も一つの区切り文字とみなされる","%w(","  apple","  melon","  orange",")","#=> [\"apple\", \"melon\", \"orange\"]","","  値にスペースを含めたい場合、バックスプラッシュでエスケープする","%w(big\\ apple small\\ melon orange)  #=> [\"big apple\", \"small melon\", \"orange\"]","","  式展開や改行文字(\\n)、タブ文字(\\t)などを含めたい場合、%W(大文字のW)を使う","prefix = 'This is'","%W(#{prefix}\\ an\\ apple small\\nmelon orange)  #=> [\"This is an apple\", \"small\\nmelon\", \"orange\"]","","  %記法は「2.8.2 %記法で文字列を作る」でも学習してるから、そっちも参照する。また、%記法でシンボルの配列を作る方法もある。これは「5.7.2 %記法でシンボルやシンボルの配列で作成する」で学習する","","","","                        💠 4.7.11 文字列を配列に変換する","  文字列を分解して配列に変換することもできる。何個か方法はあるが、ここではcharsメソッドとsplitメソッドを学習する","  charsメソッドは文字列中の1文字1文字を配列の要素に分解するメソッド","'Ruby'.chars  #=> [\"R\", \"u\", \"b\", \"y\"]","","  splitメソッドは引数で渡した区切り文字で文字列を配列に分割するメソッド","'Ruby,Java,Perl,PHP'.split(',')  #=> [\"Ruby\", \"Java\", \"Perl\", \"PHP\"]","","  このほかにも正規表現と組み合わせて文字列を配列に変換できる。これについては「6.3.4 正規表現と組み合わせると便利なStringクラスのメソッド」で学習する","","","","                              💠 4.7.12 配列に初期値を設定する","  ここまで配列の作成は[]を使ってきたが、このほかにもArray.newを使って作成する方法がある","a = Array.new  # a = []と同じ","","  Array.newに引数を渡すと、その個数分の要素が追加される。このときの初期値はnil","a = Array.new(5)  # 要素が5つの配列を作成する","a  #=> [nil, nil, nil, nil, nil]","","  さらに第2引数を指定したら、nil以外の初期値を設定できる","a = Array.new(5, 0)  # 要素が5つで0が初期値とする配列を作成する","a  #=> [0, 0, 0, 0, 0]","","  Array.newではブロックを使って初期値を設定することもできる。ブロックは作成する要素の数だけ呼ばれて、ブロック引数には要素の添え字が渡される。","  配列にはブロックの戻り値がそれぞれ初期値として設定される。","    ex) ブロックを使うコード例","a = Array.new(10) { |n| n % 3 + 1 }  # 要素数が10で、1, 2, 3, 1, 2, 3...と繰り返す配列を作る","a  #=> [1, 2, 3, 1, 2, 3, 1, 2, 3, 1]","","","","                     💠 4.7.13 配列に初期値を設定する場合の注意点","  だが、第2引数を使って初期値を指定する場合は注意が必要","a = Array.new(5, 'default')  # 要素が5つで'default'を初期値とする配列を作成する","a  #=> [\"default\", \"default\", \"default\", \"default\", \"default\"]","","str = a[0]  # 1番目の要素を取得する","str  #=> \"default\"","","str.upcase!  # 1番目の要素を大文字に変換する(破壊的変更)","str  #=> \"DEFAULT\"","","a  #=> [\"DEFAULT\", \"DEFAULT\", \"DEFAULT\", \"DEFAULT\", \"DEFAULT\"]  # 配列の要素全てが大文字に変わってしまった","","  これは配列の前要素が同じ文字列オブジェクトを参照してるから発生する問題。一見、配列の各要素は別々のように見えても、実際は1つのオブジェクトに紐づいてしまってるから、そのオブジェクトが変更されると無関係に見える他の要素も一緒に変更されてしまう","  この問題を避けるためには引数ではなく、ブロックで初期値を渡すようにする","a = Array.new(5) { 'default' }  # ブロックを使って、ブロックの戻り値を初期値とする(ブロック引数には添え字が渡されるが、ここでは使わないからブロック引数を省略)","a  #=> [\"default\", \"default\", \"default\", \"default\", \"default\"]","","str = a[0]  # 1番目の要素を取得する","str  #=> \"default\"","","str.upcase!  # 1番目の要素を大文字に変換する(破壊的変更)","str  #=> \"DEFAULT\"","","a  #=> [\"DEFAULT\", \"default\", \"default\", \"default\", \"default\"]  # 1番目の要素だけが大文字になって、ほかは変わらない","","  ブロックを使うと、ブロックが呼ばれるたびに文字列の\"default\"が新し��作成されるから、結果として配列の各要素は別々の文字列を参照することになる。","  ややこしいが、「同じ値で同一のオブジェクト」なのか、「同じ値で異なるオブジェクト」なのか、意識してコードを書かないと、思わぬ不具合を作ってしまう可能性がある。","","","","                      💠 4.7.14 ミュータブル？　イミュータブル？","  P.124確認","  ","    Column []や<<を使った文字列の操作","  文字列は配列とは無関係なオブジェクトだが、[]や<<を使って配列と同じような操作をすることができる","a = 'abcde'","a[2]  #=> \"c\"  # 3文字目を取得","a[1, 3]  #=> \"bcd\"  # 2文字目から3文字分を取得","a[-1]  #=> \"e\"  # 最後の1文字を取得","","a[0] = 'X'  # 1文字目を\"X\"に置き換える","a  #=> \"Xbcde\"","a[1, 3] = 'Y'  # 2文字目から3文字分を\"Y\"に置き換える","a  #=> \"XYe\"","a << 'PQR'  # 末尾に\"PQR\"を連結する","a  #=> \"XYePQR\""],"id":1037}],[{"start":{"row":323,"column":0},"end":{"row":402,"column":15},"action":"remove","lines":["","                        💠 4.7.11 文字列を配列に変換する","  文字列を分解して配列に変換することもできる。何個か方法はあるが、ここではcharsメソッドとsplitメソッドを学習する","  charsメソッドは文字列中の1文字1文字を配列の要素に分解するメソッド","'Ruby'.chars  #=> [\"R\", \"u\", \"b\", \"y\"]","","  splitメソッドは引数で渡した区切り文字で文字列を配列に分割するメソッド","'Ruby,Java,Perl,PHP'.split(',')  #=> [\"Ruby\", \"Java\", \"Perl\", \"PHP\"]","","  このほかにも正規表現と組み合わせて文字列を配列に変換できる。これについては「6.3.4 正規表現と組み合わせると便利なStringクラスのメソッド」で学習する","","","","                              💠 4.7.12 配列に初期値を設定する","  ここまで配列の作成は[]を使ってきたが、このほかにもArray.newを使って作成する方法がある","a = Array.new  # a = []と同じ","","  Array.newに引数を渡すと、その個数分の要素が追加される。このときの初期値はnil","a = Array.new(5)  # 要素が5つの配列を作成する","a  #=> [nil, nil, nil, nil, nil]","","  さらに第2引数を指定したら、nil以外の初期値を設定できる","a = Array.new(5, 0)  # 要素が5つで0が初期値とする配列を作成する","a  #=> [0, 0, 0, 0, 0]","","  Array.newではブロックを使って初期値を設定することもできる。ブロックは作成する要素の数だけ呼ばれて、ブロック引数には要素の添え字が渡される。","  配列にはブロックの戻り値がそれぞれ初期値として設定される。","    ex) ブロックを使うコード例","a = Array.new(10) { |n| n % 3 + 1 }  # 要素数が10で、1, 2, 3, 1, 2, 3...と繰り返す配列を作る","a  #=> [1, 2, 3, 1, 2, 3, 1, 2, 3, 1]","","","","                     💠 4.7.13 配列に初期値を設定する場合の注意点","  だが、第2引数を使って初期値を指定する場合は注意が必要","a = Array.new(5, 'default')  # 要素が5つで'default'を初期値とする配列を作成する","a  #=> [\"default\", \"default\", \"default\", \"default\", \"default\"]","","str = a[0]  # 1番目の要素を取得する","str  #=> \"default\"","","str.upcase!  # 1番目の要素を大文字に変換する(破壊的変更)","str  #=> \"DEFAULT\"","","a  #=> [\"DEFAULT\", \"DEFAULT\", \"DEFAULT\", \"DEFAULT\", \"DEFAULT\"]  # 配列の要素全てが大文字に変わってしまった","","  これは配列の前要素が同じ文字列オブジェクトを参照してるから発生する問題。一見、配列の各要素は別々のように見えても、実際は1つのオブジェクトに紐づいてしまってるから、そのオブジェクトが変更されると無関係に見える他の要素も一緒に変更されてしまう","  この問題を避けるためには引数ではなく、ブロックで初期値を渡すようにする","a = Array.new(5) { 'default' }  # ブロックを使って、ブロックの戻り値を初期値とする(ブロック引数には添え字が渡されるが、ここでは使わないからブロック引数を省略)","a  #=> [\"default\", \"default\", \"default\", \"default\", \"default\"]","","str = a[0]  # 1番目の要素を取得する","str  #=> \"default\"","","str.upcase!  # 1番目の要素を大文字に変換する(破壊的変更)","str  #=> \"DEFAULT\"","","a  #=> [\"DEFAULT\", \"default\", \"default\", \"default\", \"default\"]  # 1番目の要素だけが大文字になって、ほかは変わらない","","  ブロックを使うと、ブロックが呼ばれるたびに文字列の\"default\"が新しく作成されるから、結果として配列の各要素は別々の文字列を参照することになる。","  ややこしいが、「同じ値で同一のオブジェクト」なのか、「同じ値で異なるオブジェクト」なのか、意識してコードを書かないと、思わぬ不具合を作ってしまう可能性がある。","","","","                      💠 4.7.14 ミュータブル？　イミュータブル？","  P.124確認","  ","    Column []や<<を使った文字列の操作","  文字列は配列とは無関係なオブジェクトだが、[]や<<を使って配列と同じような操作をすることができる","a = 'abcde'","a[2]  #=> \"c\"  # 3文字目を取得","a[1, 3]  #=> \"bcd\"  # 2文字目から3文字分を取得","a[-1]  #=> \"e\"  # 最後の1文字を取得","","a[0] = 'X'  # 1文字目を\"X\"に置き換える","a  #=> \"Xbcde\"","a[1, 3] = 'Y'  # 2文字目から3文字分を\"Y\"に置き換える","a  #=> \"XYe\"","a << 'PQR'  # 末尾に\"PQR\"を連結する","a  #=> \"XYePQR\""],"id":1038}]]},"ace":{"folds":[],"scrolltop":4884.5,"scrollleft":0,"selection":{"start":{"row":323,"column":0},"end":{"row":323,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":304,"state":"start","mode":"ace/mode/ruby"}},"timestamp":1621585234970,"hash":"5582a95d7930676fd9e6ab6b76d71bfe42443e06"}